"""1. შექმენით ფუნქცია სახელად numbers_product. ფუნქციას გადაეცით სამი არგუმენტი
 - start, end, step. შემდეგ გამოიყენეთ while ციკლი (for ციკლი არ შეიძლება) და სიაში დაამატეთ რიცხვები 
 - დაიწყეთ start-იდან, იტერაცია მოახდინეთ step-ით და ციკლი ამუშავეთ end-ამდე.
   განიხილეთ ეს სია და მოახდინეთ მასზე ფილტრაცია, კიდევ ახალ სიაში დაამატეთ მარტო 3-ის ჯერადი რიცხვები.
 საბოლოოდ დააბრუნეთ 3-ის ჯერადების სიის ყველა რიცხვის ნამრავლი - product."""

#def numbers_product():
#    while

"""2. პირველ დავალებაში მიღებული შედეგი შეინახეთ ცვლადში.
 შემდეგ შექმენით ახალი ფუნქცია, სადაც ამ რიცხვზე მოახდენთ მათემატიკურ მოქმედებებს:
   +, -, *, /. აუცილებელია, რომ მომხმარებელს შემოატანინოთ მეორე რიცხვი და შემდეგ 
   მოახდინოთ მათემატიკური მოქმედებები.
"""

"""3. შექმენით ფუნქცია სახელად hashtag generator. მომხმარებელს შეეკითხეთ წინადადება და ის გადაეცით
 არგუმენტად ფუნქციას. მუშაობის წესები: საბოლოო ვერსია იწყება #-თი, სიტყვები შეერთებულია,
   ყველა სიტყვა იწყება დიდი ასოთი. Test case:
"abc def ghi" -> "#AbcDefGhi"""

#i = input("Write one sentence")

#def hashtag_generator():
    

#hashtag_generator(i)






"""4. შექმენით ფუნქცია სახელად num_divisors. ამ სიას არგუმენტად გადაეცით მომხმარებლის მიერ შემოტანილი
  მთელი რიცხვი. თქვენი დავალებაა, რომ დააბრუნოთ სია, სადაც იქნება ამ რიცხვის ყველა გამყოფი.
  Test case: 20 -> [1, 2, 4, 5, 10, 20]
"""



"""5. შექმენით ფუნქცია manual_split. ამ ფუნქციაში უნდა შეიმუშავოთ split-ის მსგავსი ალგორითმი,
 მაგრამ არ გამოიყენოთ თვითონ split. თქვენ ფუნქციას არგუმენტად გადაეცით მომხმარებლის მიერ შემოტანილი სიტყვა.
   ასევე მომხმარებელს შეეკითხეთ start, end, step მნიშვნელობები, გადაეცით ფუნქციას და იმუშავეთ სიტყვაზე.
     Test case: "Hello World!", 2, 6, 2 -> "lo".
"""

